<?php class Dfm{protected$conf=array();public function __construct(array$conf=array()){$this->init($conf);}public function init(array$conf){$this->conf=$conf;$this->setConf('cwd',getcwd());$this->setConf('phases',array('performAjaxOp'=>1,'prepareResponse'=>1,'prepareOutput'=>1,'printExit'=>1));if(!isset($conf['ajaxOp'])){$this->setConf('ajaxOp',isset($_REQUEST['ajaxOp'])&&is_string($_REQUEST['ajaxOp'])?$_REQUEST['ajaxOp']:'');}if(!isset($conf['isWin'])){$this->setConf('isWin',!strncasecmp(PHP_OS,'WIN',3));}if(!isset($conf['filterNonAscii'])){$this->setConf('filterNonAscii',$this->conf['isWin']);}foreach(array('exec','img','upload','rename')as$type){$key=$type.'Extensions';if(isset($conf[$key])&&is_string($conf[$key])){$this->setConf($key,preg_split('/[\s,]+/',$conf[$key],-1,PREG_SPLIT_NO_EMPTY));}}if(!isset($conf['execExtensions'])){$this->setConf('execExtensions',array('php','php5','pl','py','cgi','asp','js'));}if(!isset($conf['imgExtensions'])){$this->setConf('imgExtensions',array('jpg','jpeg','png','gif'));}if(!isset($conf['uploadMaxSize'])){$this->setConf('uploadMaxSize',2*1024*1024);}elseif(is_string($conf['uploadMaxSize'])){$this->setConf('uploadMaxSize',$this->parseSize($conf['uploadMaxSize']));}}public function run($phase='printExit'){if(isset($this->conf['phases'][$phase])){if($old_handler=set_error_handler(array($this,'errorHandler'))){restore_error_handler();}foreach($this->conf['phases'] as$current=>$i){unset($this->conf['phases'][$current]);$this->$current();if($phase==$current){break;}}if(!$old_handler){restore_error_handler();}return TRUE;}return FALSE;}public function validate(){$conf=&$this->conf;if(isset($conf['validated'])){return$conf['validated'];}$params=array('dirConf','rootDirPath','scriptDirPath','baseUrl');foreach($params as$param){if(empty($conf[$param])){$this->setMessage('Missing configuration parameter: %param.',array('%param'=>$param));return$conf['validated']=FALSE;}}if(!is_dir($conf['scriptDirPath'])){$this->setMessage('Invalid script directory.');return$conf['validated']=FALSE;}if(!is_dir($conf['rootDirPath'])){if(!mkdir($conf['rootDirPath'],$this->getConf('directoryMode',0775),TRUE)){$this->setMessage('Root directory does not exist.');return$conf['validated']=FALSE;}}$conf['rootDirPathSlash']=$conf['rootDirPath'];if(substr($conf['rootDirPathSlash'],-1)!=='/'){$conf['rootDirPathSlash'].='/';}if(substr($conf['baseUrl'],-1)!=='/'){$conf['baseUrl'].='/';}return$conf['validated']=$this->prepareActiveDir();}protected function prepareActiveDir(){$dirname=isset($this->conf['activeDir'])?$this->conf['activeDir']:$this->httpActiveDir();if(isset($dirname)){$dirconf=$this->dirConf($dirname);}else{foreach($this->conf['dirConf'] as$dirname=>$dirconf)break;}if(isset($dirconf)&&is_array($dirconf)&&$this->prepareDir($dirname)){$dirname=(string)$dirname;if(!isset($this->conf['dirConf'][$dirname])){$this->conf['dirConf'][$dirname]=$dirconf;}}else{if(isset($dirname)){$this->setMessage('%dirname is not accessible.',array('%dirname'=>$dirname));}else{}$dirname=FALSE;}$this->conf['activeDir']=$dirname;return$dirname!==FALSE;}protected function httpActiveDir(){if(isset($_POST['activeDir'])){return$_POST['activeDir'];}if(isset($_GET['activeDir'])){return$_GET['activeDir'];}if(isset($_POST['initActiveDir'])&&$this->dirConf($_POST['initActiveDir'])){return$_POST['initActiveDir'];}if(isset($_COOKIE['dfmLAD'])&&$this->dirConf($_COOKIE['dfmLAD'])){return$_COOKIE['dfmLAD'];}if(isset($_POST['fallbackDir'])&&$this->dirConf($_POST['fallbackDir'])){return$_POST['fallbackDir'];}}protected function checkSecurityKey(){if(!$securityKey=$this->getConf('securityKey')){$this->setMessage('Missing security key.');return FALSE;}if(!isset($_POST['securityKey'])||$_POST['securityKey']!==$securityKey){$this->setMessage('Invalid security key.');return FALSE;}return TRUE;}public function&dirContent($dirname,$get_props=FALSE){$dircontent=&$this->conf['dirContent'][$dirname];if(!isset($dircontent)){$options=$this->getFilterOptions();$options['listFiles']=$this->dirPerm($dirname,'listFiles');$options['listFolders']=$this->dirPerm($dirname,'listFolders');$options['getProps']=$get_props;$dircontent=$this->dirPathContent($this->dirPath($dirname),$options);}if($get_props&&!isset($dircontent['props'])){$dircontent['props']=$this->subdirProps($this->dirPath($dirname));foreach($dircontent['files'] as$filename=>$filepath){$dircontent['files'][$filename]=$this->fileProps($filepath);}foreach($dircontent['subdirs'] as$filename=>$filepath){$dircontent['subdirs'][$filename]=$this->subdirProps($filepath);}}return$dircontent;}public function dirPathContent($dirpath,array&$options=array()){$dircontent=array('files'=>array(),'subdirs'=>array());$getprops=!empty($options['getProps']);if($getprops){$dircontent['props']=$this->subdirProps($dirpath);}$listfiles=isset($options['listFiles'])?$options['listFiles']:TRUE;$listsubdirs=isset($options['listFolders'])?$options['listFolders']:TRUE;if(!$listfiles&&!$listsubdirs){return$dircontent;}if(!$opendir=opendir($dirpath)){$dircontent['error']=TRUE;return$dircontent;}$re=empty($options['filterRE'])?FALSE:$options['filterRE'];$callback=empty($options['callback'])?FALSE:$options['callback'];$pathprefix=substr($dirpath,-1)==='/'?$dirpath:$dirpath.'/';while(($filename=readdir($opendir))!==FALSE){if($filename==='.'||$filename==='..'){continue;}if($re&&preg_match($re,$filename)){continue;}$filepath=$pathprefix.$filename;$is_dir=is_dir($filepath);if($is_dir?!$listsubdirs:!$listfiles){continue;}if($callback){$result=$callback($this,$options,$filename,$filepath,$is_dir);if($result===FALSE){continue;}elseif($result===-1){break;}}if($is_dir){$dircontent['subdirs'][$filename]=$getprops?$this->subdirProps($filepath):$filepath;}else{$dircontent['files'][$filename]=$getprops?$this->fileProps($filepath):$filepath;}}closedir($opendir);return$dircontent;}public function dirConf($dirname,$skip_isdir_check=FALSE,$skip_name_check=FALSE){$dirname=(string)$dirname;if(isset($this->conf['dirConf'][$dirname])){return$this->conf['dirConf'][$dirname];}$checked=&$this->conf['static'][__FUNCTION__];if(isset($checked[$dirname])){return$checked[$dirname];}if($dirname==='.'){return$checked[$dirname]=FALSE;}$pos=strrpos($dirname,'/');if(!$skip_name_check){$filename=$pos===FALSE?$dirname:substr($dirname,$pos+1);if($filename===''||$filename==='.'||$filename==='..'){return$checked[$dirname]=FALSE;}$re=&$this->conf['static']['dirConfFilterRE'];if(!isset($re)){$re=$this->getFilterRegExps();$re[]='\\\\';$re='/'.implode('|',$re).'/';}if(preg_match($re,$filename)){return$checked[$dirname]=FALSE;}}if(!$skip_isdir_check){if(!is_dir($this->conf['rootDirPathSlash'].$dirname)){return$checked[$dirname]=FALSE;}}$parent=$pos===FALSE?'.':substr($dirname,0,$pos);$dirconf=$this->dirConf($parent,TRUE,$skip_name_check);if($dirconf&&!empty($dirconf['subdirConf'])){if(empty($dirconf['subdirConf']['inherit'])){$dirconf=$dirconf['subdirConf'];}$dirconf+=array('derived'=>1);}else{$dirconf=FALSE;}return$checked[$dirname]=$dirconf;}public function dirPerm($dirname,$perm){if($dirconf=$this->dirConf($dirname)){return isset($dirconf['perms'][$perm])?$dirconf['perms'][$perm]:!empty($dirconf['perms']['all']);}return FALSE;}public function getPredefinedDirname($dirname){if(isset($this->conf['dirConf'][$dirname])&&empty($this->conf['dirConf'][$dirname]['derived'])){return$dirname;}$prefix=$dirname.'/';foreach($this->conf['dirConf'] as$dirname=>$conf){if(strpos($dirname,$prefix)===0&&empty($conf['derived'])){return$dirname;}}}public function permExists($perm){$perms=&$this->conf['static'][__FUNCTION__];if(isset($perms[$perm])){return$perms[$perm];}foreach($this->conf['dirConf'] as$dirname=>$dirconf){do{if(isset($dirconf['perms'][$perm])){if($dirconf['perms'][$perm]){return$perms[$perm]=TRUE;}}elseif(!empty($dirconf['perms']['all'])){return$perms[$perm]=TRUE;}}while(isset($dirconf['subdirConf'])&&is_array($dirconf=$dirconf['subdirConf']));}return$perms[$perm]=FALSE;}public function dirPath($dirname){return$dirname==='.'?$this->conf['rootDirPath']:$this->conf['rootDirPathSlash'].$dirname;}public function dirFilePath($dirname,$filename){return$this->joinPaths($this->dirPath($dirname),$filename);}public function validateDirFile($dirname,$filename){$dircontent=&$this->dirContent($dirname);if(isset($dircontent['files'][$filename])){return isset($dircontent['props'])?$this->dirFilePath($dirname,$filename):$dircontent['files'][$filename];}$this->setRemovedConf($dirname,'files',$filename);return FALSE;}public function validateDirSubdir($dirname,$filename){$dircontent=&$this->dirContent($dirname);if(isset($dircontent['subdirs'][$filename])){return isset($dircontent['props'])?$this->dirFilePath($dirname,$filename):$dircontent['subdirs'][$filename];}$this->setRemovedConf($dirname,'subdirs',$filename);return FALSE;}public function addDirFile($dirname,$filename,$props=NULL){$filepath=$this->dirFilePath($dirname,$filename);if(!isset($props))$props=$this->fileProps($filepath);if(isset($this->conf['dirContent'][$dirname])){$dircontent=&$this->conf['dirContent'][$dirname];$dircontent['files'][$filename]=isset($dircontent['props'])?$props:$filepath;}$this->setAddedConf($dirname,'files',$filename,$props);}public function removeDirFile($dirname,$filename){if(isset($this->conf['dirContent'][$dirname])){$dircontent=&$this->conf['dirContent'][$dirname];if(isset($dircontent['files'][$filename])){unset($dircontent['files'][$filename]);$this->setRemovedConf($dirname,'files',$filename);}}}public function addDirSubdir($dirname,$filename,$props=NULL){$filepath=$this->dirFilePath($dirname,$filename);if(!isset($props))$props=$this->subdirProps($filepath);if(isset($this->conf['dirContent'][$dirname])){$dircontent=&$this->conf['dirContent'][$dirname];$dircontent['subdirs'][$filename]=isset($dircontent['props'])?$props:$filepath;}$this->setAddedConf($dirname,'subdirs',$filename,$props);}public function removeDirSubdir($dirname,$filename){if(isset($this->conf['dirContent'][$dirname])){$dircontent=&$this->conf['dirContent'][$dirname];if(isset($dircontent['subdirs'][$filename])){unset($dircontent['subdirs'][$filename]);$this->setRemovedConf($dirname,'subdirs',$filename);}}}public function setAddedConf($dirname,$type,$filename,$props){$this->conf['added'][$dirname][$type][$filename]=$props;unset($this->conf['removed'][$dirname][$type][$filename]);}public function setRemovedConf($dirname,$type,$filename){$this->conf['removed'][$dirname][$type][$filename]=$filename;unset($this->conf['added'][$dirname][$type][$filename]);}public function fileProps($filepath,array$props=array()){if(!isset($props['size'])){$props['size']=filesize($filepath);}if(!isset($props['date'])){$props['date']=filemtime($filepath);}if(!isset($props['width'])){$imgexts=&$this->conf['static'][__FUNCTION__];if(!isset($imgexts)&&$imgexts=$this->getConf('imgExtensions')){$imgexts='/\.('.implode('|',$imgexts).')$/i';}if($imgexts&&preg_match($imgexts,$filepath)&&$info=getimagesize($filepath)){$props['width']=$info[0];$props['height']=$info[1];}}return$props;}public function subdirProps($dirpath,array$props=array()){if(!isset($props['date'])){$props['date']=filemtime($dirpath);}if(!isset($props['readonly'])&&!is_writable($dirpath)){$props['readonly']=TRUE;}return$props;}public function addJs($filepath){return$this->addJsCss($filepath,'js');}public function addCss($filepath){return$this->addJsCss($filepath,'css');}protected function addJsCss($filepath,$type){if(($pos=strpos($filepath,':'))||file_exists($this->conf['cwd'].'/'.$filepath)){$this->conf[$type.'Files'][]=$pos?$filepath:$this->filepathUrl($filepath);}}protected function registerExtensions(){$corepath=$this->scriptPath('core');foreach(array('delete','move','copy','newdir','rename','upload','resize','crop','download','search')as$op){$this->registerHook('ajax_'.$op,'_dfm_'.$op.'_ajax_'.$op,$corepath.'/'.$op.'.php');}foreach($this->getConf('plugins',array())as$plugin){$this->registerPlugin($plugin);}if($theme=$this->getConf('theme')){$this->registerTheme($theme);}$this->invoke('register_alter');}public function registerPlugin($plugin){return$this->registerExtension($plugin,'plugin',$this->pluginPath($plugin).'/register.php');}public function registerTheme($theme){return$this->registerExtension($theme,'theme',$this->themePath($theme).'/register.php');}protected function registerExtension($extension,$type,$file=NULL){if(!empty($this->conf['registered'][$type][$extension])){return;}if($file&&file_exists($file=$this->conf['cwd'].'/'.$file)){include_once$file;}$func='dfm_'.$extension.'_'.$type.'_register';if(function_exists($func)){$this->conf['registered'][$type][$extension]=TRUE;$func($this);}}public function invoke($hook,$a=NULL,$b=NULL,$c=NULL){$results=array();if(!empty($this->conf['hooks'][$hook])){foreach($this->conf['hooks'][$hook] as$func=>$file){if($call=$this->callbackExists($func,$file)){if(is_array($call)){list($class,$method)=$call;$results[$func]=$class::$method($this,$a,$b,$c);}else{$results[$func]=$func($this,$a,$b,$c);}}}}return$results;}public function callbackExists($func,$file=1){$files=&$this->conf['static'][__FUNCTION__]['files'];$funcs=&$this->conf['static'][__FUNCTION__]['funcs'];if(!isset($files[$file])){$files[$file]=TRUE;if($file!=1&&file_exists($file=$this->conf['cwd'].'/'.$file)){include_once$file;}}if(!isset($funcs[$func])){$call=explode('::',$func);$funcs[$func]=isset($call[1])?(method_exists($call[0],$call[1])?$call:FALSE):function_exists($func);}return$funcs[$func];}public function registerHook($hook,$func,$file=1){$this->conf['hooks'][$hook][$func]=$file;}public function pluginPath($plugin){return$this->scriptPath("plugins/$plugin");}public function themePath($theme){return$this->scriptPath("themes/$theme");}public function scriptPath($subpath=NULL){$dirpath=$this->conf['scriptDirPath'];return isset($subpath)?$this->joinPaths($dirpath,$subpath):$dirpath;}public function includeFile($filename,$parent='core'){return include_once$this->conf['cwd'].'/'.$this->scriptPath($parent.'/'.$filename);}public function log($message,array$tokens=array(),$type='error'){}public function activeDir(){return$this->conf['activeDir'];}public function ajaxOp(){return$this->conf['ajaxOp'];}public function setMessage($message,array$tokens=array(),$type='error'){$this->conf['messages'][$type][]=empty($tokens)?array($message):array($message,$tokens);}public function setNamesMessage($message,array$names,$type='error'){return$this->setMessage($message,array('%names'=>implode(', ',$names)),$type);}public function setConf($key,$value){$this->conf[$key]=$value;}public function mergeConf($key,$arr,$recursive=FALSE){$this->conf[$key]=isset($this->conf[$key])&&is_array($this->conf[$key])?($recursive?array_merge_recursive($this->conf[$key],$arr):array_merge($this->conf[$key],$arr)):$arr;}public function getConf($key,$default=NULL){return isset($this->conf[$key])?$this->conf[$key]:$default;}public function&getConfByRef($key){return$this->conf[$key];}public function prepareDir($dirname,$check_writable=FALSE){$dirpath=$this->dirPath($dirname);$mode=$this->getConf('directoryMode',0775);if(!is_dir($dirpath)&&!mkdir($dirpath,$mode,TRUE)){return FALSE;}if((!is_readable($dirpath)||$check_writable&&!is_writable($dirpath))&&!chmod($dirpath,$mode)){return FALSE;}return TRUE;}protected function setDefaultResponse(){foreach($this->defaultResponseKeys()as$key){$this->setResponseConf($key,TRUE);}if($this->validate()){$op=$this->ajaxOp();if($op==='load'){if($lang=$this->getConf('lang')){$this->addJs($this->scriptPath('i18n/dfm.'.$lang.'.js'));$this->conf['response']['lang']=$lang;}$dirname=$this->activeDir();$this->conf['response']['dirContent'][$dirname]=&$this->dirContent($dirname,TRUE);$this->setResponseConf('dirConf',TRUE);$this->setResponseConf('jsFiles',TRUE);$this->setResponseConf('cssFiles',TRUE);$this->setResponseConf('securityKey');if($this->getConf('exposeRootDirPath')){$this->setResponseConf('rootDirPath',TRUE);}$this->setResponseConf('rootDirUrl');$this->setResponseConf('urlRewrite');$this->setResponseConf('i18n');$this->setResponseConf('scheme');$this->conf['response']['scriptDirUrl']=$this->filepathUrl($this->scriptPath());$this->setResponse('filterOptions',$this->getFilterOptions(TRUE));$this->setResponseConf('uploadExtensions');$this->setResponseConf('uploadMaxSize');$this->setResponseConf('uploadInsecure');$this->setResponseConf('execExtensions');if($swfauth=$this->getConf('swfAuth')){$this->conf['response']['swfAuth']=$swfauth;$this->conf['response']['swfupSrc']=$this->filepathUrl($this->scriptPath('core/misc/swfup.swf'));}$this->setResponseConf('renameExtensions');$this->setResponseConf('renameExtensionAlter');$this->setResponseConf('imgExtensions');$this->setResponseConf('imgMaxDim');$this->setResponseConf('imgUpscale');$this->setResponseConf('imgCopy');$this->setResponseConf('thumbUrl');$this->setResponseConf('thumbUrlRewrite');$this->setResponseConf('thumbUrlQuery');$this->setResponseConf('searchOn');}elseif($op==='browse'){$dirname=$this->activeDir();$this->conf['response']['dirContent'][$dirname]=&$this->dirContent($dirname,TRUE);$this->conf['response']['dirConf'][$dirname]=&$this->conf['dirConf'][$dirname];}}}public function defaultResponseKeys(){return array('activeDir','ajaxOp','messages','added','removed');}public function setResponse($key,$value){$this->conf['response'][$key]=$value;}public function setResponseConf($key,$skip_check=FALSE){if($skip_check||isset($this->conf[$key])){$this->conf['response'][$key]=&$this->conf[$key];}}protected function prepareJsCss(){if($suffix=$this->getConf('jsCssSuffix')){foreach(array('jsFiles','cssFiles')as$type){if(!empty($this->conf[$type])){foreach($this->conf[$type] as&$path){$path.=(strpos($path,'?')===FALSE?'?':'&').$suffix;}}}}}protected function performAjaxOp(){if(!$this->validate())return FALSE;$op=$this->ajaxOp();if($op===''||$op!=='load'&&$op!=='browse'&&!$this->checkSecurityKey())return FALSE;$this->registerExtensions();$this->invoke('ajax_'.$op);}protected function prepareResponse(){$this->setDefaultResponse();$this->invoke('response_alter');$this->prepareJsCss();}protected function prepareOutput(){if(!isset($this->conf['headers']['Content-Type'])){$this->conf['headers']['Content-Type']='text/'.(!empty($_REQUEST['htmlResponse'])?'html':'javascript').'; charset=utf-8';}foreach($this->conf['response'] as$key=>$value){if($value===NULL){unset($this->conf['response'][$key]);}}$this->conf['output']=$this->jsonEncode($this->conf['response']);if(substr($this->conf['headers']['Content-Type'],0,9)==='text/html'){$this->conf['output']='<html><body><textarea>'.$this->conf['output'].'</textarea></body></html>';}$this->invoke('output_alter');}protected function printExit(){$this->sendHeaders($this->conf['headers']);print$this->conf['output'];$this->invoke('exit');exit();}public function setHeader($key,$val=NULL){$this->conf['headers'][$key]=$val;}public function sendHeaders(array$headers){foreach($headers as$key=>$value){if(isset($value)){header($key.($value===''?'':': '.$value));}}}public function jsonEncode($var){return str_replace(array('<','>','&'),array('\u003c','\u003e','\u0026'),json_encode($var));}public function joinPaths($dirpath,$filename){if($dirpath==='.'){return$filename;}if($filename==='.'){return$dirpath;}if(substr($dirpath,-1)==='/'){return$dirpath.$filename;}return$dirpath.'/'.$filename;}public function splitPath($path){if(is_string($path)&&$path!=''){$parts=explode('/',$path);$filename=array_pop($parts);if($filename!==''){return array($parts?implode('/',$parts):'.',$filename);}}return array(NULL,NULL);}public function filepathUrl($filepath){return$this->conf['baseUrl'].str_replace('%2F','/',rawurlencode($filepath));}public function validateFileName($filename,array$options=NULL){if($filename==='.'||$filename==='..'){return FALSE;}$len=strlen($filename);if(!$len){return FALSE;}if(!isset($options)){$options=$this->getFilterOptions();}if(!empty($options['maxFileLength'])&&$len>$options['maxFileLength']){return FALSE;}if(!empty($options['filterRE'])&&preg_match($options['filterRE'],$filename)){return FALSE;}if(preg_match('@^\s|\s$|[/\\\\:\*\?"<>\|\x00-\x1F]@',$filename)){return FALSE;}return TRUE;}public function getFilterOptions($skip_re=FALSE){$options['filterRegExps']=$this->getFilterRegExps();if(!$skip_re){$options['filterRE']=$options['filterRegExps']?'/'.implode('|',$options['filterRegExps']).'/':FALSE;}$options['maxFileLength']=$this->getConf('maxFileLength',255);return$options;}public function getFilterRegExps(){$regexps=&$this->conf['static'][__FUNCTION__];if(!isset($regexps)){$regexps=$this->getConf('filterRegExps',array());if($this->getConf('filterDotFiles',TRUE)){$regexps[]='^\.';$regexps[]='\.$';}if($this->getConf('filterNonAscii',FALSE)){$regexps[]='[^\x20-\x7E]';}}return$regexps;}public function errorHandler($errno,$message,$file,$line,$context){if($errno&error_reporting()){$types=array(1=>'error',2=>'warning',4=>'parse error',8=>'notice',16=>'core error',32=>'core warning',64=>'compile error',128=>'compile warning',256=>'user error',512=>'user warning',1024=>'user notice',2048=>'strict warning',4096=>'recoverable fatal error');$message=$types[$errno].': '.htmlspecialchars($message,ENT_QUOTES,'UTF-8').' in '.htmlspecialchars($file,ENT_QUOTES,'UTF-8').' on line '.$line.'.';if($this->getConf('displaySystemErrors')){$this->setMessage($message);}$this->log($message,array(),'error');}}public function basename($path){$separator=DIRECTORY_SEPARATOR==='\\'?'/\\\\':'/';return preg_match('@([^'.$separator.']+)['.$separator.']*$@',$path,$matches)?$matches[1]:'';}public function neutralizeFileName($filename,array$safexts=array()){$parts=explode('.',$filename);if(!isset($parts[2]))return$filename;$name=array_shift($parts);$ext=array_pop($parts);foreach($parts as$part){$name.='.'.$part;if(!in_array(strtolower($part),$safexts)&&preg_match('/^[a-zA-Z]{2,5}\d?$/',$part))$name.='_';}return$name.'.'.$ext;}public function getSelectedItems(array$keys=array()){$static_name=$keys?implode(':',$keys):0;$data=&$this->conf['static'][__FUNCTION__][$static_name];if(!isset($data)){$data=array();if(!empty($_POST['dirnames'])&&is_array($_POST['dirnames'])){$keys[]='files';$keys[]='subdirs';foreach($_POST['dirnames'] as$i=>$dirname){if($this->dirConf($dirname)){foreach($keys as$key){if(!empty($_POST[$key][$i])&&is_array($_POST[$key][$i])){$data[$dirname][$key]=$_POST[$key][$i];}}}}}}return$data;}public function parseSize($size){$unit=preg_replace('/[^bkmgtpezy]/i','',$size);$size=preg_replace('/[^0-9\.]/','',$size);return$unit?round($size*pow(1024,stripos('bkmgtpezy',$unit[0]))):round($size);}public function realpath($path){$func=$this->getConf('realpathFunc');return$func?call_user_func($func,$path):realpath($path);}public function checkFile($path){if($this->validate()&&is_string($path)&&$path!==''){list($dirname,$filename)=$this->splitPath($path);if(isset($dirname)&&$this->dirPerm($dirname,'listFiles')){return$this->validateDirFile($dirname,$filename);}}return FALSE;}public function checkFileUri($uri){if($this->validate()&&is_string($uri)&&$uri!==''){$root=$this->getConf('rootDirPathSlash');if(strpos($uri,$root)===0){$path=substr($uri,strlen($root));if($this->checkFile($path)){return$path;}}}return FALSE;}}